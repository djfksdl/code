@charset 'utf-8';
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}
.box {
    width: 100px;
    height: 90px;
    background-color: coral;
    text-align: center;
    line-height: 90px;
    font-size: 30px;
    border: 1px solid #222;
}
.container1 {
    display: flex;
    /* 가로로할지 세로로 할지 정하는게 플렉스 디렉션이다. */
    flex-direction: row;
    /* row(행)가 기본값임, 가로배치 */
    flex-direction: row-reverse;
    /* 역방향이다. */
    /* flex-direction: column; */
     /* 아이템을 세로축으로 배치 */
    /* flex-direction: column-reverse; */
    flex-wrap: wrap;
    /* 브라우저 줄어들면 자식들이 개행을 함. 노랩이면 줄여도 개행 안함.폭이 줄어듦 */
    margin: 50px 0px;
    /* gap: 20px; */
    /* 늘어나도 개행됨 */
}
.container2 {
    display: flex;
    background-color: #aaa;
    justify-content: center;
    /* 아이템(자식박스)을 가운데로 정렬. 원래는 너비를 주고 마진오토하는데 그럴필요없이 */
    justify-content: flex-start;
    /* 플렉스 시작하는곳에서 정렬 */
    justify-content: flex-end;
    justify-content: space-around;
    /* 아이템이 중심이 되어서 주위에 공간을 준다. */
    justify-content: space-between;
    /* 어라운드와의 차이점: 1,2사이에 공간이 생김 */
} 
.container3{
    display: flex;
    height: 600px;
    background-color: antiquewhite;
    margin: 50px 0 ;
    align-items: center;
    /* 세로 가운데 정렬 */
    /* justify-content: center; */
    /* 가로 가운데 정렬 */
    /* =>둘이 같이 적으면 가운데 정렬이 됨 */
    align-items: flex-end;
    /* 자동으로 하단정렬*/
    align-items: flex-start;
}
.container4 {
    display: flex;
    background-color: coral;
    height: 600px;
    flex-wrap: wrap;
    
    align-content: flex-end;
    /* 얼라인 아이템이랑 다름 */
    /* 아이템 하단정렬 */
    align-content: flex-start;
    /* 아이템 상단정렬 */
    align-content: center;
    /* 아이템 중앙정렬 */
    align-content: space-around;
    /* 주위로 공간을 줌, 아이템 균등분할 정렬 */
    align-content: space-between;
    /* 둘 사이에만 공간이 생김 */
    /* align-content는 justify-content와 같은개념. 가로인지 세로인지 차이만 남.세로버젼임*/
    margin: 50px 0;
}
.container5{
    display: flex;
    height: 600px;
    background-color: aquamarine;
    align-items: center;
    justify-content: center;
}
/* content는 잘 쓰진 않지만 item과의 차이는? : 플렉스 노랩으로 하면 align-content:center가 안먹음. 개행안되면 세로로 정렬이 안됨.얼라인 컨텐트는 세로로 정렬하는건데 개행이 되어야 세로로 정렬이 됨. 디폴트값은 노랩이다. 잘안쓰는 이유?  보통 우리가 개행을 안시킴. 메뉴를 플렉스로 나누어 놓으면 개행안시켜서 사라지게 만든다.(물론 경우에 따라서 쓸때도 있음)그럴땐 노랩으로 쓰기때문에 중간 맞추려면 얼라인 아이템 센터로 많이 쓴다. */
/* 노랩이면 세로로 높이가 다 잡힌다. 개행될수가 없는 구조임. 랩으로 하면 길이가 컨텐트만큼 먹힘. 그래서 개행됨. 아이템센터는 텍스트 얼라인과 비슷한 구조. 전체 영역이 잡혀있는데 가운데로 가는것. 세로버전의 저스티파이 콘텐트가 이애다. 공간제외하고 나머지는 프리한땅이라 개행도 가능하다. 그 컨텐트를 균등분할할수있다. 스페이스 비트윈,공간이라고하면..!
아이템은 높이가 전체고 잡혀서 균등분할개념은 아님 높이 600에 위 중간 아래로만 잡히기때문에.
컨텐트는 전체 애들데리고 간격을 배치시키는거임.
저스티파이 컨텐트는 컨텐트들 나머지 공간을 균등하게 분등한다 */
/* 공간에서 센터로 가는거고 컨텐트는 간격을 맞추고 */
.container6 {
    display: flex;
    justify-content: space-between;
    margin: 50px 0;
}
/* 순서변경 */
.container6 .box:nth-child(1){order: 3;}
.container6 .box:nth-child(2){order: 4;}
.container6 .box:nth-child(3){order: 1;}
.container6 .box:nth-child(4){order: 2;}
/* flex-grow - 박스 확대 너비에 대한 값을 지정한다. 기본값은 0, 음수값은 적용불가 */
/* flex-grow의 값은 남은 여백을 각각의 item들이 가져가는 비율을 의미한다. */
/* https://blogpack.tistory.com/863 */

.container7{
    margin: 50px 0;
    display: flex;
    justify-content: space-between;
}
.container7 .box:nth-child(1){
    /* flex-grow: 0; */
    flex: 0 1 auto;
}
.container7 .box:nth-child(2){
    /* flex-grow: 1; */
    flex: 1 1 auto;
}
.container7 .box:nth-child(3){
    flex-grow: 1;
    /* 남아있는 스페이스를 나눈다는 뜻이다. 브라우저가 제일 작게 줄어들면 나눠줄게 없으니까 똑같은 너비가 다시 됨 */
    /* 남아있는 스페이스를 2로 나누어 1씩 배분한다는 뜻. 디폴트는 0이다. */
}
.container8 {
    display: flex;
    margin: 50px 0;
    max-width: 1200px;
    /* 최대로 1200이다. 고정은 아님! 반응형에서 중요하다. 그 이하면 그 사이즈에 마춰서 맥스됨 */
}
.container8 .box{
    width: 200px;
}
.container8 .box:nth-child(1){flex-shrink: 1;}
.container8 .box:nth-child(2){flex-shrink: 0;}
.container8 .box:nth-child(3){flex-shrink: 1;}
.container8 .box:nth-child(4){flex-shrink: 2;}
/* 슈링크 기본값(디폴트)는 1이다. 반대다. 어떻게 줄어드냐. 800에서 600 줄어들었을때 잘리는 부분(200)을 빚탕감할때 가지겠냐는 개념 4나누기 200px이니 50px씩 나눠진다. 1은 150 2는 200,3은 150,4는 50*2=100이니까 100으로 줄어든다, 개행이 안되었을때가 기준이다.
1로 세팅안하면 안줄어듦. 남는 공간 엔분의1이 그로우고, 남는 공간이 없으면 0이다.-굿노트참조*/
/* flex-shrink - 박스 확대 너비에 대한 값을 지정한다. 기본값은 1, 음수값은 적용불가, 0값을 설정하면 아이템 너비가 축소되지 않음*/
/* flex-grow의 값은 남은 여백을 각각의 item들이 가져가는 비율을 의미한다. */
/* https://blogpack.tistory.com/863 */
/* container 너비 800px에서 600px까지 줄이면 200px의 부족분만큼 아이템너비가 shrink 배수에 비례해서 줄어듦
ex) 200px/(1+0+1+2)=50px  flex-shrink:1이면 50px*1만큼 너비가 줄어듦 */

.container9 {
    display: flex;
    margin: 50px 0;
    justify-content: space-around;
    flex-direction: column;
}
.container9 .box:nth-child(1){width: 200px;}
/* .container9 .box:nth-child(2){flex-basis: 200px;} */
/* flex-direction기본값일땐 차이 없는데 칼럼으로 바꾸니 차이 생김
따라서 베이시스는 정렬되는 방향으로의 수치를 의미한다. */
.container9 .box {
    flex-basis: 200px;
}

/* 순서대로 한꺼번에 쓸수 있음.

flex : flex-grow flex-shrink flex-basis;
맨 앞에는 flex-grow 즉 부모 영역이 자식 영역 보다 넓은 경우 남은 공간을 분배하는 비율을 말합니다.
두 번째 는 flex-shrink 부모 영역이 자식 영역보다 작을 경우 줄어드는 비율을 나타냅니다.
마지막은 flex-basis로 항목의 기본크기를 말합니다. auto는 기본값이며 안에 컨텐츠의 크기 만큼의 영역을 사용합니다.
즉 위에 flex:1 1 auto;를 했을 경우 결과 값을 보면 부모 영역의 공간이 더 넒기 때문에 flex-grow : 1; 이 실행되어 같은 비율로 남은 공간을 가져가기 됩니다.

그런데 2번째 영역이 더 큰 이유는 flex-basis : auto;로 지정되어있기 때문에 item박스안에 컨텐츠의 길이에 맞춰서 가장 넓은 공간을 차지하게 됩니다. */

/* ex) container7에 적용해봄 */